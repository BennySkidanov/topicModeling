# This is a basic workflow to help you get started with Actions

name: Combined

on:
  workflow_dispatch:

jobs:
  
  steps_1-3_gathering_data:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    strategy:
      fail-fast: false
      matrix:
        project_folder_name: [Lang]
        
    outputs:
        folder_name: ${{matrix.project_folder_name}}
 
    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      
      - name: gathering
        run: |
              cd `git rev-parse --show-toplevel`
              python Run.py ${{matrix.project_folder_name}}
      # Runs a set of commands using the runners shell

      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: steps_1-3_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects
          
          
  step_4_topic_modeling:
  
    needs: steps_1-3_gathering_data
    
    runs-on: ubuntu-18.04
    
    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results for - 
        uses: actions/download-artifact@v2
        with:
          name: steps_1-3_artifact
          path: ./projects
          
      - name: topic modeling
        run: |
              cd `git rev-parse --show-toplevel`
              python topicModeling.py ${{needs.steps_1-3_gathering_data.outputs.folder_name}}

      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_4_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects


  step_5_other_methods:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    strategy:
      fail-fast: false
      matrix:
        #techniques: [BugLocator,  BRTracer, BLUiR, AmaLgam,  BLIA, Locus]
        techniques: [BugLocator]
        #group: [Commons]
        project: [Lang]
        #folder_name: [BugLocator_lang]
    
    outputs:
       project: ${{matrix.project}}
       technique: ${{matrix.techniques}}
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    - uses: actions/checkout@v2
      with:
        repository: matanhaz/Bench4BL
    - name: first
      run: sudo apt install build-essential
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    # Runs a set of commands using the runners shell
    - name: Download subjects’ archives
      run: |
            pip install virtualenv
            pip install jq
            
            cd `git rev-parse --show-toplevel`
            bootstrap/downloads.sh
    # Runs a set of commands using the runners shell
    - name: Download subjects’ archives
      run: |
            mkdir data
            name=${{matrix.project}}
            project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
            group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
            bootstrap/unpacking.sh ./archives ./data $group $project
    - name: Install Indri
      run: |
          mkdir depots
          cd depots
          wget https://excellmedia.dl.sourceforge.net/project/lemur/lemur/indri-5.15/indri-5.15.tar.gz
          tar -xzf indri-5.15.tar.gz
          cd indri-5.15
          ./configure --prefix=`pwd`/../install
          make
          make install
    - name: Generate Settings.txt file
      run: |
          echo indripath=`git rev-parse --show-toplevel`/depots/install/bin/ > `git rev-parse --show-toplevel`/techniques/Settings.txt
    - name: Create virtual environment
      run: |
          cd `git rev-parse --show-toplevel`
          virtualenv venv -p `which python2`
          # source venv/bin/activate
          pip install -r requirements.txt
    - name: Build JAR
      run: |
          bootstrap/buildjar.sh
#       - name: Source virtual environment
#         run: |
#             cd `git rev-parse --show-toplevel`
#             .venv/bin/activate

    - name: Modify PATH
      run: |
          export PATH=$PATH:`pwd`/depots/install/bin
    - name: ls
      run: ls -R

    - name: Inflate the source codes
      run: |
          cd `git rev-parse --show-toplevel`
          name=${{matrix.project}}
          project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
          group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
          cd `git rev-parse --show-toplevel`/scripts
          python launcher_GitInflator.py  -g $group -p $project
    - name: Build bug repositories
      run: |
            cd `git rev-parse --show-toplevel`
            name=${{matrix.project}}
            project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
            group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
            cd `git rev-parse --show-toplevel`/scripts
            python launcher_repoMaker.py  -g $group -p $project
            python launcher_DupRepo.py  -g $group -p $project
            python Counting.py  -g $group -p $project
#       - name: Execute previous techniques
#         run: |
#               mkdir -p ../techniques/locus_properties
#               mkdir -p ../techniques/blia_properties
#               cd `git rev-parse --show-toplevel`/scripts
#               python launcher_Tool.py -w Exp1   -g Apache -p CAMEL



    - name: Collect performance results
      run: |
            cd `git rev-parse --show-toplevel`
            
            name=${{matrix.project}}
            project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
            group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
            cd `git rev-parse --show-toplevel`/scripts
            python launcher_Tool.py -w ${{matrix.project}}   -g $group -p $project -t ${{matrix.techniques}}
#              python launcher_Tool.py -w ExpFirst   -g Apache -p CAMEL -t ${{ matrix.techniques }}

    - name: save performance results
      run: |
            cd `git rev-parse --show-toplevel`/scripts
            python launcher_XLSResultsAll.py -w ${{matrix.project}}
    - name: Upload data
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: step_5_artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ./expresults
  
  
  step_6_modify_other_methods_data:
    needs: [step_5_other_methods,step_4_topic_modeling, steps_1-3_gathering_data]
    
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results step 4
        uses: actions/download-artifact@v2
        with:
          name: step_4_artifact
          path: projects
          
      - name: Download results step 5
        uses: actions/download-artifact@v2
        with:
          name: step_5_artifact
          path: projects/${{needs.steps_1-3_gathering_data.outputs.folder_name}}
          
      - name: modify
        run: |
              cd `git rev-parse --show-toplevel`
              python modify_other_methods_data.py ${{needs.step_5_other_methods.outputs.project}} ${{needs.step_5_other_methods.outputs.technique}} 
              
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_6_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: projects
  
  
  step_7_download_matrixes:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    strategy:
      fail-fast: false
      matrix:
        project: [Lang]
        bug_id: [19] #[19, 28, 29, 45, 49, 83, 224, 229, 259, 262, 284, 21, 27, 30, 31, 32, 33, 34, 36, 48, 54, 56, 57, 68, 72, 73, 76, 78, 87, 90, 176, 178, 181, 182, 183, 200, 219, 225, 230, 248, 249, 252, 258, 267, 269, 275, 279, 282, 283, 289, 290, 291, 296, 305, 306, 307, 309, 311, 312, 314, 315, 317, 319, 321, 325]
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Run a multi-line script
        run: |
          sudo apt update
          sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat maven
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.34'

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install junitparser
          pip install networkx
          pip install pytest 
          pip install gitpython
          pip install jira
          pip install termcolor 
          pip install openpyxl  
          pip install javalang
          pip install pathlib
          pip install junitparser
          pip install numpy
          pip install sklearn
          pip install pandas
          pip install pyswarm
          pip install networkx
          pip install lizard
          pip install jsons
      - name: Checkout d4j
        uses: actions/checkout@v2
        with:
          repository: amir9979/defects4j
          path: .
          fetch-depth: 0
      
      - name: Checkout javadiff
        uses: actions/checkout@v2
        with:
          repository: amir9979/javadiff
          path: ./framework/bug-mining/tracing/javadiff
          fetch-depth: 0

      - name: Checkout sfl
        uses: actions/checkout@v2
        with:
          repository: amir9979/sfl
          path: ./framework/bug-mining/tracing/sfl
          fetch-depth: 0

      - run: cpanm --installdeps .
      - run: ./init.sh

      - name: execute
        run: python wrapper.py commons-lang bug-mining_${{ matrix.bug_ind }} ${{ matrix.bug_ind }}
        working-directory: ./framework/bug-mining

      - name: delete repo
        if: ${{always()}}
        run: |
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/project_repos
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/issues
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/framework/core
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/gitlog
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/issues.txt
            rm -rf ./framework/bug-mining/bug-mining_${{ matrix.bug_ind}}/framework/projects/Lang/lib
            rm -rf ./framework/bug-mining/tracing
      
      
      - name: create dir matrixes
        run: |
              cd ./framework/bug-mining
              mkdir matrixes_before_change
              
      - name: Script
        run: |
              import os
              a= os.listdir()
              for file in a:
                  if 'bug-mining' in file:
                      os.rename(f"{file}\\framework\\projects\\Lang\\matrix_{file.split('_')[1]}.json",f"matrixes_before_change\\{file.split('_')[1]}.json")

        shell: python
      
      - name: Upload bug-mining
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_7_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./framework/bug-mining/matrixes_before_change
        
      
  
  step_8_barinel:
    needs: [step_5_other_methods,step_4_topic_modeling, steps_1-3_gathering_data, step_6_modify_other_methods_data, step_7_download_matrixes]
    
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
              
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results step 6
        uses: actions/download-artifact@v2
        with:
          name: step_6_artifact
          path: projects
      
      - name: create folder "barinel"
        run: |
              cd `git rev-parse --show-toplevel`
              cd projects
              cd ${{needs.steps_1-3_gathering_data.outputs.folder_name}}
              mkdir barinel
              cd barinel
              mkdir matrixes_before_change
              mkdir matrixes
      
      - name: Download results step 7
        uses: actions/download-artifact@v2
        with:
          name: step_7_artifact
          path: projects/${{needs.steps_1-3_gathering_data.outputs.folder_name}}/barinel/matrixes_before_change
          
      - name: barinel
        run: |
              cd `git rev-parse --show-toplevel`
              python diagnoser\sfl_diagnoser\main.py ${{needs.steps_1-3_gathering_data.outputs.folder_name}} ${{needs.step_5_other_methods.outputs.technique}}
              
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_8_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: projects

        
   # - name: Upload math result for job 2
   #   uses: actions/upload-artifact@v2
   #   with:
   #     name: homework
   #       path: ./math-homework.txt
